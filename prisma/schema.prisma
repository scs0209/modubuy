generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  role           Role?     @default(user)
  address        String?
  detail_address String?
  accounts       Account[]
  likes          Like[]
  payments       Payment[]
  reviews        Review[]
  sessions       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Payment {
  id        String   @id @default(cuid())
  userId    String
  paymentId String
  amount    Float
  status    String
  createdAt DateTime @default(now())
  product   String?  @default("Default product")
  chargeId  String?
  user      User     @relation(fields: [userId], references: [id])
}

model Like {
  userId    String
  productId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@id([userId, productId])
}

model Review {
  id        String   @id @default(cuid())
  content   String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  productId String 
  user      User     @relation(fields: [userId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@index([userId])
  @@index([productId])
}

model Product {
  id            String             @id @default(cuid())
  url           String             @unique
  currency      String
  title         String
  currentPrice  Float
  originalPrice Float
  highestPrice  Float?
  lowestPrice   Float?
  averagePrice  Float?
  discountRate  Float?
  description   String?
  category      String?
  reviewsCount  Int?
  stars         Float
  isOutOfStock  Boolean?           @default(false)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  image         String[]
  priceHistory  PriceHistoryItem[]
  reviews       Review[]
  likes         Like[]
}

model PriceHistoryItem {
  id        String   @id @default(cuid())
  price     Float
  date      DateTime @default(now())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
}

enum Role {
  user
  admin
}
